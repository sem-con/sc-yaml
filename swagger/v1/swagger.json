{
  "swagger": "2.0",
  "info": {
    "title": "Semantic Container API",
    "version": "v1",
    "description": "Semantic Containers enable the secure and traceable exchange of defined data on specified usage conditions between multiple parties.\n \n Further information:\n - learn more about Semantic Containers at https://www.ownyourdata.eu/semcon\n - view other [OwnYourData Service API's](https://api-docs.ownyourdata.eu)",
    "contact": {
      "email": "office@ownyourdata.eu"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "paths": {
    "/oauth/token": {
      "post": {
        "summary": "request token",
        "tags": [
          "Authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "invalid"
          }
        }
      }
    },
    "/oauth/token/info": {
      "get": {
        "summary": "show token information",
        "tags": [
          "Authorization"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true,
            "description": "Client token"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "invalid request"
          }
        }
      }
    },
    "/oauth/revoke": {
      "post": {
        "summary": "revoke token",
        "tags": [
          "Authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/oauth/applications": {
      "post": {
        "summary": "create access account",
        "tags": [
          "Authorization"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true,
            "description": "Client token"
          },
          {
            "in": "body",
            "name": "input",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "scopes": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "scopes"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "invalid token"
          }
        }
      }
    },
    "/oauth/applications/{id}": {
      "delete": {
        "summary": "remove account",
        "tags": [
          "Authorization"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "required": true,
            "description": "Client token"
          },
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "'id' of account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "invalid token"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/active": {
      "get": {
        "summary": "check if container is active",
        "tags": [
          "Container information"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "auth": {
                  "type": "boolean"
                }
              },
              "required": [
                "active",
                "auth"
              ]
            }
          }
        }
      }
    },
    "/api/info": {
      "get": {
        "summary": "container overview",
        "tags": [
          "Container information"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "records": {
                  "type": "integer"
                }
              },
              "required": [
                "records"
              ]
            }
          }
        }
      }
    },
    "/api/data": {
      "get": {
        "summary": "check provenance",
        "tags": [
          "Container information"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "provision": {
                  "type": "hash"
                },
                "validation": {
                  "type": "hash"
                }
              },
              "required": [
                "provision",
                "validation"
              ]
            }
          }
        }
      },
      "post": {
        "summary": "write data",
        "tags": [
          "Data access"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "500": {
            "description": "invalid input"
          },
          "422": {
            "description": "invalid format"
          },
          "412": {
            "description": "non-matching usage policy"
          }
        }
      }
    },
    "/api/log": {
      "get": {
        "summary": "log information",
        "tags": [
          "Container information"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/api/data/plain": {
      "get": {
        "summary": "read raw data",
        "tags": [
          "Data access"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/api/meta": {
      "get": {
        "summary": "detailed container information",
        "tags": [
          "Semantic information"
        ],
        "produces": [
          "plain/text"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "set container information",
        "tags": [
          "Semantic information"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "422": {
            "description": "invalid"
          }
        }
      }
    },
    "/api/meta/{detail}": {
      "get": {
        "summary": "specific container information",
        "tags": [
          "Semantic information"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail",
            "in": "path",
            "type": "string",
            "description": "'info' for general information, 'usage' for data usage policy, 'example' for examplary input data",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/buy": {
      "post": {
        "summary": "buy data",
        "tags": [
          "Billing"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "billing": {
                  "type": "hash"
                },
                "provision": {
                  "type": "hash"
                },
                "validation": {
                  "type": "hash"
                }
              },
              "required": [
                "billing",
                "provision",
                "validation"
              ]
            }
          }
        }
      }
    },
    "/api/paid?tx={transaction_hash}": {
      "parameters": [
        {
          "name": "transaction_hash",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "summary": "confirm payment",
        "tags": [
          "Billing"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "secret": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "secret"
              ]
            }
          }
        }
      }
    },
    "/api/payments": {
      "get": {
        "summary": "list all payments",
        "tags": [
          "Billing"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/api/data/full": {
      "get": {
        "summary": "read data with all available attributes",
        "tags": [
          "Data access"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/api/data/provision": {
      "get": {
        "summary": "read data with usage policy and provenance information",
        "tags": [
          "Data access"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/api/data/fragment/{id}": {
      "get": {
        "summary": "apply watermarking to data",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "identification ('id') for watermarked data fragment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/account/{account_id}": {
      "get": {
        "summary": "get watermarked data for given account",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "type": "integer",
            "description": "identification for account within container (requires key & secret)",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/account/{account_id}/fragment/{fragment_id}": {
      "get": {
        "summary": "get specified watermarked data fragment for given account",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "type": "integer",
            "description": "identification for account within container (requires key & secret)",
            "required": true
          },
          {
            "name": "fragment_id",
            "in": "path",
            "type": "integer",
            "description": "identification ('id') for watermarked data fragment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "get distance and similarity for given account, fragment_id, and provided dataset",
        "tags": [
          "Watermarking"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          },
          {
            "name": "account_id",
            "in": "path",
            "type": "integer",
            "description": "identification for account within container (requires key & secret)",
            "required": true
          },
          {
            "name": "fragment_id",
            "in": "path",
            "type": "integer",
            "description": "identification ('id') for watermarked data fragment",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "422": {
            "description": "invalid format"
          },
          "500": {
            "description": "error"
          }
        }
      }
    },
    "/api/watermark/account/{account_id}/fragment/{fragment_id}/error": {
      "get": {
        "summary": "get error vector for specified watermarked data fragment and given account",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "type": "integer",
            "description": "identification for account within container (requires key & secret)",
            "required": true
          },
          {
            "name": "fragment_id",
            "in": "path",
            "type": "integer",
            "description": "identification ('id') for watermarked data fragment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/account/{account_id}/fragment/{fragment_id}/kpi/{kpi}": {
      "get": {
        "summary": "get KPIs for specified watermarked data fragment and given account",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "type": "integer",
            "description": "identification for account within container (requires key & secret)",
            "required": true
          },
          {
            "name": "kpi",
            "in": "path",
            "type": "string",
            "description": "'mean' for arithmetic mean and 'stdv' for standard deviation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/error/{key}": {
      "get": {
        "summary": "get error vector of length 100 for specified key",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "type": "integer",
            "description": "numerical input (seed) that generates random error vector",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/error/{key}/{len}": {
      "get": {
        "summary": "get error vector of length \"len\" for specified key",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "type": "integer",
            "description": "numerical input (seed) that generates random error vector",
            "required": true
          },
          {
            "name": "key",
            "in": "path",
            "type": "integer",
            "description": "define length of error vector",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/fragments": {
      "get": {
        "summary": "get list of fragment identifiers, associated keys, and account_id",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/fragment/{fragment_id}": {
      "get": {
        "summary": "get specified (not watermarked) data fragment",
        "tags": [
          "Watermarking"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fragment_id",
            "in": "path",
            "type": "integer",
            "description": "identification ('id') for watermarked data fragment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/api/watermark/identify": {
      "post": {
        "summary": "get descending sorted list of fragment identifiers for provided dataset",
        "tags": [
          "Watermarking"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "422": {
            "description": "invalid format"
          },
          "500": {
            "description": "error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "description": "Authorization token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}